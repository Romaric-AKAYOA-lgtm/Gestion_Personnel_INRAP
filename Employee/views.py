from django.shortcuts import render
from django.shortcuts import render, redirect
from django.utils.timezone import now
from django.contrib.auth.models import User  # Import du mod√®le User de Django
from .forms import LoginForm
from Activation.models import Activation
# Create your views here.
from django.shortcuts import render, redirect, get_object_or_404

from Activation.models import Activation
from fonction.models import Fonction
from specialite.models import Specialite
from .models import Employee
from .forms import EmployeeForm
from Activation.views import activation_view

def get_username_from_session(request):
    """R√©cup√®re le nom d'utilisateur depuis la session et redirige vers la page de connexion si aucun utilisateur n'est trouv√©."""
    username = request.session.get('username', None)
    
    if not username:
        return None  # Aucun nom d'utilisateur trouv√© dans la session
    return username
# Vue pour afficher tous les employ√©s
def liste_employes(request):
    """Affiche la page d'accueil avec la gestion du personnel et la v√©rification d'activation."""
    
    # üîπ V√©rifier l'activation
    activation = Activation.objects.first()
    if not activation or not activation.is_valid():
        return redirect("Activation:activation_page")  # Redirige vers une page d'activation si expir√©
    response = activation_view(request)
    if response.status_code == 302:  # Redirection si la cl√© est invalide
        return response
    username = get_username_from_session(request)

    # Assurez-vous que le nom d'utilisateur est disponible dans la session
    if not username:
        return redirect('login')  # Redirige vers la page de connexion si pas de nom d'utilisateur dans la session

    # V√©rifier l'activation en appelant la fonction
    employes = Employee.objects.all()
    return render(request, 'Employee/liste_employes.html', {
       'username':username,  'employes': employes})

# Vue pour ajouter un employ√©
def ajouter_employe(request):
    form = EmployeeForm()
    specialite= Specialite.objects.all().order_by('designation')
    fonction=Fonction.objects.all().order_by('designation')
    if request.method == 'POST':
        form = EmployeeForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return redirect('Employee:lists')
    else:
        form = EmployeeForm()
    return render(request, 'Employee/ajouter_employe.html', {
        'form': form,
        'specialite':specialite, 
        'fonction':fonction
        })

# Vue pour modifier un employ√©
def modifier_employe(request, id):
    employe = get_object_or_404(Employee, id=id)
    specialite= Specialite.objects.all().order_by('designation')
    fonction=Fonction.objects.all().order_by('designation')
    if request.method == 'POST':
        form = EmployeeForm(request.POST, request.FILES, instance=employe)
        if form.is_valid():
            form.save()
            return redirect('Employee:list')
    else:
        form = EmployeeForm(instance=employe)
    return render(request, 'Employee/modifier_employe.html', {
        'form': form,
         'specialite':specialite, 
        'fonction':fonction
        })

# Vue pour supprimer un employ√©
def supprimer_employe(request, id):
    employe = get_object_or_404(Employee, id=id)
    if request.method == 'POST':
        employe.delete()
        return redirect('Employee:list')
    return render(request, 'Employee/supprimer_employe.html', {'employe': employe})


def secretaire_detail2(request, username, password):
    """Affiche la page d'accueil avec la gestion du personnel et la v√©rification d'activation."""
    
    # üîπ V√©rifier l'activation
    activation = Activation.objects.first()
    if not activation or not activation.is_valid():
        return redirect("Activation:activation_page")  # Redirige vers une page d'activation si expir√©

    """
    V√©rifie si un secr√©taire avec username et password existe,
    puis affiche ses d√©tails.
    """
    secretaire = Employee.objects.filter(username=username).first()
    
    if not secretaire or not secretaire.check_password(password):
        return render(request, "secretaire/login.html", {"error": "Nom d'utilisateur ou mot de passe incorrect."})

    if secretaire.date_fin and secretaire.date_fin < now().date():
        return render(request, "Employee/login.html", {"error": "Votre acc√®s est expir√©."})

    return render(request, "Employee/detail.html", {"secretaire": secretaire})



def login_view(request):
    """Affiche la page d'accueil avec la gestion du personnel et la v√©rification d'activation."""

    # üîπ V√©rifier l'activation
    activation = Activation.objects.first()
    if not activation or not activation.is_valid():
        return redirect("Activation:activation_page")  # Redirige vers une page d'activation si expir√©

    """
    G√®re l'authentification du secr√©taire et du superutilisateur en utilisant une session.
    """
    try:
        activation = Activation.objects.latest("activated_on")
        if not activation.is_valid():
            print("Activation est invalide, redirection vers la page d'activation.")
            return redirect("Activation:activation_page")
    except Activation.DoesNotExist:
        print("Aucune activation trouv√©e, redirection vers la page d'activation.")
        return redirect("Activation:activation_page")

    error_message = None
    print("Formulaire de connexion re√ßu.")

    if request.method == "POST":
        print("M√©thode POST d√©tect√©e.")
        form = LoginForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']

            print(f"Nom d'utilisateur : {username}")
            print(f"Mot de passe : {password}")

            # V√©rifier d'abord si l'utilisateur est un superuser
            user = User.objects.filter(username=username).first()
            if user and user.check_password(password) and user.is_superuser:
                print(f"Connexion r√©ussie pour le superutilisateur {username}.")
                request.session['superuser_id'] = user.id  # Stocker l'ID du superutilisateur
                return redirect("admin:index")  # Rediriger vers l'interface d'administration

            # V√©rifier si le secr√©taire existe avec ce username
            secretaire = Employee.objects.filter(username=username).first()

            if not secretaire:
                print("Aucun secr√©taire trouv√© avec ce nom d'utilisateur.")
                error_message = "Nom d'utilisateur incorrect."
            elif not secretaire.password:
                print("Mot de passe incorrect.", secretaire.password)
                error_message = "Mot de passe incorrect."
            elif secretaire.retirement_date and secretaire.retirement_date < now().date():
                print(f"L'acc√®s est expir√© pour {username}, date_fin : {secretaire.retirement_date}")
                error_message = "Votre acc√®s est expir√©."
            else:
                print(f"Connexion r√©ussie pour {username}. Enregistrement de l'ID dans la session.")
                # Si toutes les v√©rifications sont r√©ussies, on enregistre l'utilisateur dans la session
                request.session['secretaire_id'] = secretaire.id  # Stocker l'ID dans la session
                # Enregistrer √©galement le username pour l'utiliser sur la page d'accueil
                request.session['username'] = username  # Ajouter le username √† la session
                print("Redirection vers la page d'accueil.")
                return redirect("home")  # Rediriger vers l'accueil
        else:
            print("Le formulaire n'est pas valide.")
    else:
        print("M√©thode GET d√©tect√©e. Affichage du formulaire.")
        form = LoginForm()

    return render(request, 'Employee/login.html', {'form': form, 'error': error_message})


def logout_view(request):
    """Affiche la page d'accueil avec la gestion du personnel et la v√©rification d'activation."""
    
    # üîπ V√©rifier l'activation
    activation = Activation.objects.first()
    if not activation or not activation.is_valid():
        return redirect("Activation:activation_page")  # Redirige vers une page d'activation si expir√©

    """
    D√©connecte le secr√©taire ou le superuser en supprimant la session.
    """
    request.session.flush()  # Supprime toutes les donn√©es de session
    return redirect("Employee:login")  # Rediriger vers la page de connexion


from django.shortcuts import render
from django.http import HttpResponse
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch  # Assurez-vous que 'inch' est bien import√© ici
from .models import Employee
from datetime import datetime

def generate_employee_pdf(request):
    # Filtrage des employ√©s : ceux qui sont actifs, et ceux qui sont en retraite et dont la date n'est pas atteinte
    current_date = datetime.today().date()

    active_employees = Employee.objects.filter(status='active')
    retired_employees = Employee.objects.filter(status='retired', retirement_date__gt=current_date)

    # Cr√©ation du document PDF
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename="employees_report.pdf"'

    buffer = SimpleDocTemplate(response, pagesize=letter)
    elements = []

    # Ajouter l'ent√™te INRAP et R√©publique du Congo
    header = Paragraph("<b>INRAP</b>", style=getSampleStyleSheet()['Title'])
    header2 = Paragraph("<b>R√©publique du Congo</b>", style=getSampleStyleSheet()['Title'])
    elements.append(header)
    elements.append(header2)

    # Ajouter un espace avant le tableau
    elements.append(Spacer(1, 0.25 * inch))  # Utilisation de 'inch' ici

    # D√©finir les donn√©es du tableau : ent√™tes + donn√©es
    data = [
        ['Nom', 'Pr√©nom', 'Matricule', 'Grade', 'Sp√©cialit√©', 'Date de Prise de Service', 'Date de Retraite']
    ]

    # Ajout des employ√©s actifs
    for employee in active_employees:
        data.append([ 
            employee.last_name, 
            employee.first_name, 
            employee.matricule, 
            employee.grade, 
            employee.specialty, 
            employee.start_date, 
            'Non applicable'
        ])

    # Ajout des employ√©s en retraite
    for employee in retired_employees:
        data.append([ 
            employee.last_name, 
            employee.first_name, 
            employee.matricule, 
            employee.grade, 
            employee.specialty, 
            employee.start_date, 
            employee.retirement_date
        ])

    # Cr√©ation du tableau
    table = Table(data)

    # Style du tableau
    style = TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
    ])

    table.setStyle(style)

    # Ajouter le tableau au PDF
    elements.append(table)

    # Ajouter la concat√©nation de Brazzaville et de la date syst√®me en bas √† droite
    footer_text = f"Brazzaville - {datetime.now().strftime('%d/%m/%Y')}"
    footer = Paragraph(footer_text, style=getSampleStyleSheet()['Normal'])
    elements.append(Spacer(1, 0.5 * inch))  # Ajouter de l'espace avant le footer

    # Alignement du footer √† droite
    footer_table = Table([[footer]], colWidths=[400])
    footer_table.setStyle([('ALIGN', (0, 0), (-1, -1), 'RIGHT')])
    
    # Ajouter le footer
    elements.append(footer_table)

    # G√©n√©rer le PDF
    buffer.build(elements)
    return response

def employee_search(request):
    username = get_username_from_session(request)

    # Assurez-vous que le nom d'utilisateur est disponible dans la session
    if not username:
        return redirect('login')  # Redirige vers la page de connexion si pas de nom d'utilisateur dans la session

    # R√©cup√©rer les param√®tres de recherche
    query = request.GET.get('query', '')  # Recherche globale
    critere = request.GET.get('criteres', '')  # Crit√®re de recherche s√©lectionn√© (username, first_name, email, etc.)
    
    # Initialisation de la queryset avec tous les employ√©s
    employees = Employee.objects.all()

    # Si un crit√®re et un terme de recherche sont saisis, filtrer en fonction du crit√®re
    if critere and query:
        if critere == 'username':
            employees = employees.filter(username__icontains=query)
        elif critere == 'first_name':
            employees = employees.filter(first_name__icontains=query)
        elif critere == 'last_name':
            employees = employees.filter(last_name__icontains=query)
        elif critere == 'email':
            employees = employees.filter(email__icontains=query)
        elif critere == 'num_tel':
            employees = employees.filter(num_tel__icontains=query)
        elif critere == 'matricule':
            employees = employees.filter(matricule__icontains=query)
        elif critere == 'status':
            employees = employees.filter(status__icontains=query)
    elif query:
        # Si un terme de recherche est saisi sans crit√®re, effectuer une recherche globale
        employees = employees.filter(username__icontains=query) | employees.filter(first_name__icontains=query) | employees.filter(last_name__icontains=query) | employees.filter(email__icontains=query)

    # Ajouter d'autres filtres si n√©cessaire, par exemple date_debut, date_fin, etc.
    date_debut = request.GET.get('date_debut', '')
    date_fin = request.GET.get('date_fin', '')
    
    # Appliquer les filtres suppl√©mentaires uniquement si les champs sont remplis
    if date_debut:
        employees = employees.filter(start_date__gte=date_debut)
    if date_fin:
        employees = employees.filter(retirement_date__lte=date_fin)

    # Si aucune condition n'est remplie, on retourne un message disant qu'il n'y a pas de r√©sultats
    if not employees:
        employees = None  # Pas d'employ√©s trouv√©s

    return render(request, 'employee/search.html', {
        'employees': employees,
        'username': username,
        'query': query,
        'criteres': critere,
        'date_debut': date_debut,
        'date_fin': date_fin,
    })
